/**
 * Debouncing routines taken and adapted from Jack Ganssle in his blog 'A Guide
 * to Debouncing, or, How to Debounce a Contact in Two Easy Pages, by Jack
 * Ganssle'. https://www.ganssle.com/debouncing.htm
 */

#include "debounce.h"

#include <stdbool.h>
#include <stdint.h>

#include "freertos/FreeRTOS.h"
#include "freertos/timers.h"
#include <esp_attr.h>

#define NOT_USED 0

// Response time is equal to sample period multiplied by the sample count.
#define CONFIG_DB_DEFAULT_SAMPLE_PERIOD_MS 5 // delay period  of the timer
#define CONFIG_DB_DEFAULT_SAMPLE_COUNT 12
#define CONFIG_DB_DEFAULT_SAMPLING_TASK_PRIORITY 6

// The sample buffer uses left shifts. At the buffer type to an unsigned integer
// with a width large enough to accomodate the number of desired samples.
// Compiler explorer on Xtensa ESP32-S3 gcc 12.2.0 showed unsigned 32 bit ints
// to generate the least instructions.
typedef uint32_t sample_buf_t;

typedef bool (*sampling_func_t)(void *);

typedef struct {
  db_edge_input_t input;
  sampling_func_t sample;
} db_edge_input_ex_t;

// Replace this function with a function that gets the required pin value.
bool digital_pin_read() { return 1; }

/**
 * Poll a pin for effective falling edge detection.
 *
 * Example if CONFIG_DB_DEFAULT_SAMPLE_COUNT = 12 and 16-bit state buffer.
 * Here's a diagram of what value the 'state' variable will hold to
 * determine when a falling edge has happened.
 *
 *  ignored bits     last bouncy 'one'     stable pin state 'low'
 *         \                |                     /
 *          \__________     |        ____________/
 *                      \   |       /
 *                     |--| | |---------|
 *      state -->      1111 1 00000000000
 *
 * When the GPI pin is high, 1's will be shifted onto the state variable.
 * When a user presses the button to pull the GPIO low, a mixture of 1's & 0's
 * will propagate through the stream as the signal bounces. At some point
 * there's the last bounce (a one) followed by a stream of zeroes. As the button
 * remains depressed, state continues to propagate zeroes. There's just the one
 * time, when the last bouncy "one" was in the upper bit position, that the code
 * returns a TRUE.
 * We OR in 1's in the upper bits to ignore everything but the number of lower
 * bids equal to the sample count. * *
 */
bool IRAM_ATTR debounced_is_falling_edge(db_edge_input_t input) {
  /* GCC >12 will optimize these constants out at at a minimum of optimizations
  enabled. Verified on: -O1, -O2, -O3 and -Og.*/
  const sample_buf_t ignore =
      (sample_buf_t)((sample_buf_t)-1 << CONFIG_DB_DEFAULT_SAMPLE_COUNT + 1);
  const sample_buf_t fall_edge =
      (sample_buf_t)((sample_buf_t)-1 << CONFIG_DB_DEFAULT_SAMPLE_COUNT);

  static sample_buf_t state = 0;
  state = ignore | (state << 1) | !digital_pin_read();
  if (state == fall_edge) {
    return true;
  }
  return false;
}

bool IRAM_ATTR debounced_is_rising_edge(db_edge_input_t input) {
  /* GCC >12 will optimize these constants out at at a minimum of optimizations
  enabled. Verified on: -O1, -O2, -O3 and -Og.*/
  const sample_buf_t ignore =
      ((sample_buf_t)-1 << (CONFIG_DB_DEFAULT_SAMPLE_COUNT + 1));
  const sample_buf_t rise_edge =
      ((sample_buf_t)-1 >>
       ((sizeof(sample_buf_t) * 8) - CONFIG_DB_DEFAULT_SAMPLE_COUNT + 1));

  static sample_buf_t state = 0; // Current debounce status
  state = ignore | (state << 1) | !digital_pin_read();
  if (state == rise_edge) {
    return true;
  }
  return false;
}

bool IRAM_ATTR debounced_digital_read() {
  /* GCC >12 will optimize these constants out at at a minimum of optimizations
  enabled. Verified on: -O1, -O2, -O3 and -Og.*/
  const sample_buf_t empty_buf =
      (sample_buf_t)((sample_buf_t)-1 << (CONFIG_DB_DEFAULT_SAMPLE_COUNT + 1));
  const sample_buf_t state_high_buf = -1;

  static sample_buf_t debounced_state = 0;
  static sample_buf_t candidate_state = 0;
  candidate_state = empty_buf | (candidate_state << 1) | !digital_pin_read();
  if (candidate_state == state_high_buf) {
    debounced_state = 1;
  } else if (candidate_state == empty_buf) {
    debounced_state = 0;
  }
  return debounced_state;
}

void IRAM_ATTR is_falling_edge_cb(TimerHandle_t timer) { // timer callback
  if (debounced_is_falling_edge()) {
    // Notify or update whatever needs to know.
    return;
  } else {
    return; // Do nothing.
  }
}

void sampling_task(void *pvParameters) {

  db_edge_input_t *input = pvParameters;

  // Initialise the xLastWakeTime variable with the current time.
  TickType_t last_wake_time = xTaskGetTickCount();

  for (;;) {
    // Wait for the next cycle.
    vTaskDelayUntil(&last_wake_time, pdMS_TO_TICKS(input->sample_period_ms));

    // Perform action if state change detected.
    if (input->sample(input)) {
      input->cb(input->cb_params);
    }
  }
}

bool db_register_edge(db_edge_input_t *input) {
  xTaskCreatePinnedToCore(sampling_task, "gui-loop", 4096 * 2, NULL, 3, NULL,
                          1);
}

#include "gpio_reg.h"
#include "soc.h"

// ESP32 GPI a writing:
// The GPIOs have a configuration register each, but the value is set using 4
// 32-bit registers, namely GPIO_OUT_W1TS/W1TC and GPIO_OUT1_W1TS/W1TC. You use
// the GPIO_OUT_* register to modify GPIO0-31, you use GPIO_OUT1_* to modify
// GPIO32 and higher. When you write an 1 in a bit in a W1TC register, you'll
// make the GPIOs associated with these bits low, when you write an 1 in a bit
// position in a W1TS register, you make the corresponding GPIO high. (W1TC =
// Write 1 To Clear, W1TS = Write 1 To Set.) For both registers, any GPIO
// written 0 does not change.

/**
 * GPIO register mappings:
 * GPIO_IN_REG -> GPIO0~31 input value
 * GPIO_IN1_REG -> GPIO32~39 input value
 */

typedef uint32_t gpio_reg_t;

// Defines the GPIO's we are interested in.
#define BIT_MASK (gpio_reg_t)0xffff

// Read the state of 8 GPIO's at once.
// Possible on the Arduino.
uint8_t digital_read_buffer() { return 0xFF; }

// Function that notifies.
void notify_if_any_gpio_high(uint8_t pin_bitfield) { return; }

void debounce_switches_high() {
  static gpio_reg_t state[CONFIG_DB_DEFAULT_SAMPLE_COUNT];
  static size_t idx = 0;
  gpio_reg_t j = (gpio_reg_t)-1; // unsigned integer trick to get all 0's

  // Update the state buffer.
  state[idx++] = BIT_MASK & REG_READ(GPIO_IN_REG);

  // Reset the index. 'state' acts as a ring buffer.
  if (idx >= CONFIG_DB_DEFAULT_SAMPLE_COUNT) {
    idx = 0;
  }

  // Check the state buffer to see if any bits are always 1.
  for (size_t i = 0; i < CONFIG_DB_DEFAULT_SAMPLE_COUNT; i++) {
    j = j & state[i];
  }

  if (j) {
    notify_if_any_gpio_high(j);
  }
}

void debounce_switches_low() {
  static gpio_reg_t state[CONFIG_DB_DEFAULT_SAMPLE_COUNT];
  static size_t idx = 0;
  gpio_reg_t j = 0;

  // Update the state buffer.
  state[idx++] = BIT_MASK & REG_READ(GPIO_IN_REG);

  // Reset the index. 'state' acts as a ring buffer.
  if (idx >= CONFIG_DB_DEFAULT_SAMPLE_COUNT) {
    idx = 0;
  }

  // Check the state buffer to see if any bits are always 1.
  for (size_t i = 0; i < CONFIG_DB_DEFAULT_SAMPLE_COUNT; i++) {
    j = j & state[i];
  }

  if (j) {
    notify_if_any_gpio_high(j);
  }
}
