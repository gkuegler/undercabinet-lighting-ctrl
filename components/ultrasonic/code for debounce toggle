/**
 * Control of HC-SR04.
 */

#include <cstdint>

#include "driver/gpio.h"
#include "esp_attr.h"
#include "esp_mac.h"
#include "esp_timer.h"
#include "ets_sys.h"

#define ECHO_PIN GPIO_NUM_8
#define TRIG_PIN GPIO_NUM_7

// defines variables
long duration; // variable for the duration of sound wave travel
int distance;  // variable for the distance measurement

int last_on = 0;

class DebounceToggle {
public:
  int delay = 100;
  int last_trigger = 0;
  bool state;

  DebounceToggle(int _delay) { delay = _delay; }
  void toggle() {
    state = !state;
    int level = state ? 1 : 0;
    // digitalWrite(ledPin, level);
  }

  int trigger() {
    // int now = millis();
    if (now - last_trigger > delay) {
      last_trigger = now;
      state = !state;
    }
    return state;
  }
};

static auto led = DebounceToggle(200);

// http://en.wikipedia.org/wiki/Hamming_weight
// This is better when most bits in x are 0
// This algorithm works the same for all data sizes.
// This algorithm uses 3 arithmetic operations and 1 comparison/branch per "1"
// bit in x.
int popcount32(uint32_t x) {
  int count;
  for (count = 0; x; count++)
    x &= x - 1;
  //   Serial.print("pop count: ");
  //   Serial.println(count);
  return count;
}

// TODO : need a way to know 'falling edge' or
//        when the hand is pulled away to reset the sample Otherwise the light
//        will
//            keep cycling if i hold my hand there.bool
sample(int distance) {
  static byte state = 0;
  byte read = distance < 70 ? 1 : 0;
  state = 0b11110000 | (state << 1) | read;
  if (state == 0xFF) {
    return true;
  }
  return false;
}

enum Status { HAND_DETECTED, HAND_ABSENT, TRANSITION };
enum HandEvent { NONE, HAND_SHORT, HAND_LONG };

int sample(unsigned long distance) {
  static uint32_t state = 0;
  bool toggle_status = false;
  // The Arduino Uno has 8-bit registers and can only shift up to 8 bits.
  byte read = distance < 100 ? 1 : 0;
  state = (state << 1) | read;
  auto bits_set = popcount8d(state);
  if (bits_set > 10) {
    return HAND_DETECTED;
  } else if (bits_set == 0) {
    return HAND_ABSENT;
  } else {
    return TRANSITION;
  }
}

// don't use long press
#define SHORT_PRESS_DURATION_MS 20
#define LONG_PRESS_DURATION_MS 400

int sample(unsigned long distance) {
  static uint16_t state = 0;
  // static unsigned long detected_time = 0;
  static bool object_has_been_close;
  // static Status hand = HAND_ABSENT;
  static bool hand_detected = false;

  // unsigned long now = millis();

  // filter 10 most recent samples
  // 1 -> 3 -> 7 -> F
  state = (state << 1) | (distance < 100);

  // 'popcount8d' counts number of bits
  auto bits_set = popcount32(0x3F & state);

  if (bits_set >= 4) {
    hand_detected = true;
  } else if (bits_set == 0) {
    hand_detected = false;
  }

  if (hand_detected && !object_has_been_close) {
    object_has_been_close = true;
    // detected_time = millis();
    return HAND_SHORT;
    // } else if (hand_detected && object_has_been_close &&
    // (now-detected_time>LONG_PRESS_DURATION_MS){
    //   return HAND_LONG;
    // }
  } else if (!hand_detected && object_has_been_close) {
    object_has_been_close = false;
  }
  return NONE;
}
